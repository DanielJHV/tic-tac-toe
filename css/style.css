*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --cell-size: 10rem;
  --mark-size: calc(var(--cell-size) * 0.7);
}

html {
  font-size: 62.5%;
}

body {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100vh;
}

.header {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 6rem;
  padding: 2rem 4.8rem;
  background-color: #444;
}

.heading-primary {
  font-size: 3rem;
  color: #eee;
}

.main {
  display: flex;
  align-items: center;
  justify-content: center;
}

.board {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  justify-content: center;
  align-content: center;
  justify-items: center;
  align-items: center;
  width: 30rem;
  height: 30rem;
}

.cell {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: var(--cell-size);
  height: var(--cell-size);
  border: 1px solid #000;
  cursor: pointer;
}

.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
  border-top: 0;
}

.cell:nth-child(3n + 1) {
  border-left: 0;
}

.cell:nth-child(3n + 3) {
  border-right: 0;
}

.cell:nth-child(7),
.cell:nth-child(8),
.cell:last-child {
  border-bottom: 0;
}
.cell.x,
.cell.circle {
  cursor: default;
}

.cell.x:before,
.board.x .cell:not(.x):not(.circle):hover::before {
  transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
  transform: rotate(-45deg);
}

/* If the  board has the class x and the cell doesn't contain the class .x or .circle, on hover it will add the before and after elements*/

.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
  content: '';
  position: absolute;
  width: calc(var(--mark-size) * 0.1);
  height: var(--mark-size);
}

.cell.x::before,
.cell.x::after {
  background-color: #000;
}

.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
  background-color: #ddd;
}

.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
  content: '';
  position: absolute;
  border-radius: 50%;
}

.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before {
  width: var(--mark-size);
  height: var(--mark-size);
}

.cell.circle::before {
  background-color: #000;
}

.board.circle .cell:not(.x):not(.circle):hover::before {
  background-color: #ddd;
}

.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after {
  width: calc(var(--mark-size) * 0.8);
  height: calc(var(--mark-size) * 0.8);
  background-color: #fff;
}

.winning-message {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: none;
  flex-direction: column;
  gap: 1rem;
  justify-content: center;
  align-items: center;
  font-size: 7rem;
  background-color: rgba(0, 0, 0, 0.9);
  color: #fff;
}

.winning-message.show {
  display: flex;
}

.winning-message button {
  font-size: 3rem;
  background-color: #fff;
  border: 1px solid #000;
  padding: 1rem 2rem;
  cursor: pointer;
  transition: 0.1s;
}

.winning-message button:hover {
  background-color: #ccc;
}

.footer {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  height: 3rem;
  background-color: #222;
}

.footer p {
  color: #eee;
  font-size: 1.4rem;
  font-weight: 400;
}

.github-logo {
  fill: #aaa;
  height: 1.8rem;
}

.github-logo:hover {
  fill: #eee;
}
